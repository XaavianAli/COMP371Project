//Lightning based off the guide at https://learnopengl.com/Lighting/Basic-Lighting with modifications.
#version 330 core
in vec3 vertexColor;
in vec3 Normal;
in vec3 FragPos;
in vec4 fragmentPositionLightSpace;
in vec2 TexCoords;
uniform float gridUnitLength;
uniform bool useShadows;
uniform vec3 viewPos;
uniform sampler2D shadowMap;
uniform bool useTextures;
uniform sampler2D ourTexture;
uniform sampler2D bloomTexture;
out vec4 FragColor;

float shadowScalar(vec3 lightDir) 
{
    // this function returns 1.0 when the surface receives light, and 0.0 when it is in a shadow
    // perform perspective divide
    vec3 ndc = fragmentPositionLightSpace.xyz / fragmentPositionLightSpace.w;
    // transform to [0,1] range
    ndc = ndc * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragment_position_light_space as coords)
    float closest_depth = texture(shadowMap, ndc.xy).r;
    // get depth of current fragment from light's perspective
    float current_depth = ndc.z;
    // check whether current frag pos is in shadow
    float bias = max(0.05 * (1.0 - dot(Normal, lightDir)), 0.002); 
    return ((current_depth - bias) < closest_depth) ? 1.0 : 0.0;
}

void main()
{
    vec3 lightColor = vec3(1.0f, 1.0f, 1.0f); //Can modify for different lighting but assignment asks for white. 

    //ambient 
    float ambientStrength = 0.8f; //Can modify for different effects.
    vec3 ambient = lightColor * ambientStrength;



    //diffuse
    vec3 norm = normalize(Normal);
    vec3 lightPos = vec3 (0.0f, 30.0*gridUnitLength, 0.0f);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);

    float shadowScalar = shadowScalar(lightDir);
	
    vec3 diffuse;
	if(useShadows){
	diffuse = shadowScalar * diff * lightColor;}
	else{diffuse = diff*lightColor;}

    //specular
    float specularStrength = 0.5f; //Can modify for different effects
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm); 
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); //32 can be changed to 2, 4, 8, 16, 32, 64, 128, 256 for various different effects.
    vec3 specular;
	if(useShadows){
	specular = shadowScalar * specularStrength * spec * lightColor; }
	else{
	specular = specularStrength * spec * lightColor; }
	vec4 textureColor = texture( ourTexture, TexCoords );
    
    vec3 result = (ambient + diffuse + specular) * vertexColor;
	if(useTextures == true){
    //FragColor = vec4(result, 1.0f)*textureColor;}
	FragColor = vec4(textureColor.rgb*(ambient+diffuse+specular), 1.0f);}
	else{FragColor = vec4(result, 1.0f);
	 }
};